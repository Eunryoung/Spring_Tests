<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 웹과 관련없는 나머지 자원들에 대한 설정을 하는 파일 -->
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- HikariCP 라이브러리 사용을 위한 설정(커넥션풀 설정) -->
	<!-- 1. HikariCP 를 활용한 DB 접속 정보 설정 위해 HikariConfig 객체 설정(JDBC 기본 설정) -->
	<!-- com.zaxxer.hikari 패키지의 HikariConfig 클래스 지정 및 속성 설정 -->
<!-- 	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> 아래 정보를 관리하는 HikariConfig 객체 만들어 줌 -->
<!-- 		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property> -->
<!-- 		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/study_spring5"></property>db명 바꿔줌 -->
<!-- 		<property name="username" value="root"></property> -->
<!-- 		<property name="password" value="1234"></property> -->
<!-- 	</bean>	 -->
	<!-- SQL 로그를 위한 log4jdbc 라이브러리 관련 DBCP 정보 변경(driverClassName, jdbcUrl 속성만 변경) -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> <!-- 아래 정보를 관리하는 HikariConfig 객체 만들어 줌 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:mysql://localhost:3306/study_spring5"></property><!-- db명 바꿔줌 -->
		<property name="username" value="root"></property>
		<property name="password" value="1234"></property>
	</bean>	
	
	<!-- 2. HikariCP 를 통해 커넥션을 관리하는 DataSource 객체(HikariDataSource) 설정 -->
	<!-- 생성자 파라미터로 1번에서 생성한 HikariConfig 객체 전달 -->
	<!-- 주의! 1단계에서 입력한 정보가 일치하지 않을 경우 서버 실행 시점에 현재 단계에서 예외 발생 -->
	<!-- 여기까지하면 커넥션 풀 관리 시작이 된다 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"> <!-- Maven Dependencies 에서 패키지명. 클래스명 복사 -->
		<constructor-arg ref="hikariConfig"></constructor-arg> <!-- 1단계의 id 값 참조 -->
	</bean>
	
	<!-- 3. Connection 객체 생성, 쿼리 전달 및 결과 리턴 등의 작업을 수행할 SQLSessionFactory 객체 설정 -->
	<!-- MyBatis - Spring 연결을 담당하며, 내부적으로 SQLSession 객체를 통해 작업 수행 -->
	<!-- 
	주의!
	1. 이전에 이미 DataSource 객체 설정(2번 단계)이 완료되어 있어야 함
	2. <bean> 태그의 id 값, class 값은 고정(시스템이 정해놓은 이름이라 바꾸면 안 됨)
	3. <property> 태그의 name 속성의 dataSource, configLocation, mapperLocations 이름 고정
	4. dataSource 
	5. configLocation, mapperLocations 속성(항목)에 지정된 각각의 파일(xml)이 실제 위치에 생성되어 있어야 함
	   (설정 항목 중 classpath 가 가리키는 기본 위치 : src/main/resources 패키지)
	-->
	<!-- classpath:/은 별도의 추가 설정이 없으면 src/main/resources 패키지를 뜻한다(resources : 자원) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property> <!-- 2단계의 id 값 참조  -->
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property> <!-- 경로에 mybatis-config.xml 파일 만들기 -->
		<property name="mapperLocations" value="classpath:/com/itwillbs/test3_mybatis/mapper/*Mapper.xml"></property> 
		<!-- 프로젝트의 패키지명과 동일하게 경로 지정 -->
		<!-- 만능문자(*)로 파일명 패턴이 동일한 파일들 지정 --> 
		<!-- 폴더 경로가 다른 경우 mapper/**/*Mapper.xml로 지정도 가능하다 -->
	</bean>
	
	<!-- 4. MyBatis 연동에 사용될 객체(클래스)들의 패키지 위치 지정(기본 루트 패키지 지정) -->
	<mybatis-spring:scan base-package="com.itwillbs.test3_mybatis"/>
	<!-- base-package 속성은 지정된 패키지의 모든 MyBatis 관련 어노테이션을 찾아서 처리함 -->
	<!-- Mapper를 설정하는 작업은 각각의 XML이나 Mapper 인터페이스를 설정할 수도 있지만 -->
	<!-- 매번 너무 번잡하기 때문에 자동적으로 com.itwillbs.test3_mybatis 패키지를 인식하는 방식으로 작성하는 것이 가장 편리 -->
</beans>
